---
swagger: '2.0'
info:
  description: API que permite extraer informacion de Twitter. Mediante esta API se pueden generar campañas de extracción de información de TWitter, que se ejecuten cada cierto tiempo. Y en base a esa información se generan reportes.
  version: 1.0.0
  title: Tweet Master API
  contact:
    email: calongefederico@gmail.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
    
#tags para ordenar la información:
tags:
  - name: PublicAPI
    description: Punto de acceso para los usuarios mediante la Interfaz Web.
    externalDocs:
      url: http://docs.my-api.com/pet-operations.htm
  - name: PrivateAPI
    description: Interacciones entre las 3 APIS Internas (Fetcher, Reporter y Manager)
  
#Se usara esta URL para la API: https/TweetMaster/API.
# host: TweetMaster
# basePath: /API
schemes:
 - https
 - http

#A excepción de /Fetcher, a las demás URLS les pega directamente el usuario mediante la Interfaz Web. 
paths:
  /Campaign/{_idC}:
    get:
      tags:
        - PublicAPI
      summary: Obtener una Campaña.
      operationId: getCampaign
      description: Indicando el id correcto se obtendrá información de la Campaña.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: "path"
        name: "_idC"
        type: integer
        format: int32
        required: true
          
      responses:
        200:
          description: OK - Campaña devuelta.
          #La Campaña que devolvemos en el body del request:
          schema:
            type: array
            items:
              $ref: '#/definitions/Campaign'
        404:
          description: Not Found - La Campaña no existe en la BD o el _idC no fue especificado.
  
    patch:
      tags:
        - PublicAPI
      summary: Modificar una Campaña.
      operationId: modCampaignByidC
      description: Modifica una Campaña en el sistema sólo si esta todavía no empezó. Se debe ingresar el _idC, una columna a modificar en coumnaAModif (email, startDate, finDate, hashtags, mentions) y el valor a modificar (en campoCOlumna).
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: "path"
        name: "_idC"
        type: integer
        format: int32
        required: true
      - in: header
        name: "columnaAModif"
        type: string
        required: true
      - in: header
        name: "campoColumna"
        type: string
        required: true
     
      responses:
        202: 
          description: Accepted - Campaña modificada.
          
        404:
          description: Not Found - La Campaña no existe o no se especificaron los 3 los parametros.
        412:
          description: Precondition Failed - La Campaña ya empezó.
  
  /Campaign:  
    delete:
      tags:
        - PublicAPI
      summary: Eliminar una campaña.
      operationId: delCampaign
      description: Elimina una campaña del sistema al proporcionarle su ID o el email del dueño. Será eliminada únicamente si la campaña todavía no empezó.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
        - in: header
          name: "_email"
          type: string
          required: false
          
        - in: header
          name: "_idC"
          type: integer
          format: int32
          required: false
          
      responses:
        200: 
          description: OK - Campaña eliminada.
        404:
          description: Not Found - El usuario no tiene ninguna campaña registrada con su email.
        412:
          description: Precondition Failed - La Campaña ya empezó o no se indicaron los parametros _email ni _idC.

    post:
      tags:
        - PublicAPI
      summary: Añade una Campaña.
      operationId: addCampaign
      description: Añade una Campaña al sistema.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Campaign
        description: Campaign to add.

        #Acá en el request especificamos la Campaña a crearse:
        schema:
          $ref: '#/definitions/Campaign'
        
      responses:
        201:
          description: Created - Campaña creada.
        412:
          description: Precondition failed - No se asignaron todos los campos a la Campaña.
    
  /Reporter/ReporterRaw/{_idC}:
    get:
      tags:
        - PublicAPI
      summary: Obtener un reporte crudo.
      operationId: getReporterRaw
      description: Se puede obtener el reporte en crudo dada la Campaña _idC. 
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: "path"
        name: "_idC"
        type: integer
        format: int32
        required: true
          
      responses:
        200:
          description: OK - Reporte retornado.
          schema:
            type: array
            items:
              $ref: '#/definitions/Tweet'
        404:
          description: Not Found - La Campaña no existe o el _idc no fue especificado o no terminó la campaña.
          
  /Reporter/ReporterJSON/{_idC}:
    get:
      tags:
        - PublicAPI
      summary: Obtener un resumen del reporte en JSON.
      operationId: getReporterJSON
      description: Se puede obtener el resumen del reporte en JSON dada la Campaña _idC.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: "path"
        name: "_idC"
        type: integer
        format: int32
        required: true
      
      responses:
        200:
          description: OK - Reporte retornado.
          schema:
            type: array
            items:
              $ref: '#/definitions/Reporter'
        404:
          description: Not Found - La Campaña no existe o el _idc no fue especificado o no terminó la campaña.
  
  /Fetcher:
     get:
      tags:
        - PrivateAPI
      summary: Obtención de los Tweets en formato JSON para ser usados por Manager.
      operationId: getTweets
      description: Parte INTERNA de la API. REcibe una Campaña como JSON en el request y devuelve al Manager en el response una lista de Tweets en formato JSON.
      consumes:
      - application/json
      produces:
      - application/json
    
      responses:
        '200':
          description: Devuelve una lista de Tweets en formato JSON.
          schema:
              $ref: '#/definitions/Tweet'

definitions:
  Campaign:
    type: object
    required:
    - idC
    - fechaInicio
    - fechaFin
    - email
    - mentions
    - hashtags
    properties:
      idC:
        type: integer
        format: int32
        example: 2
      fechaInicio:
        type: string
        format: date-time
        example: 2018 30 05 23:55:00 
      fechaFin:
        type: string
        format: date-time
        example: 2018 30 06 00:00:00 
      email:
        type: string
        format: email
        example: "calongefederico@gmail.com"
      mentions:
        type: array
        items: 
           type: string
        example: "@fedecalongeOK, @mauriciomacriOK"
      hashtags:
        type: array
        items:
          type: string
        example: "#bocaXFox, #riverXFox"
  
  Tweet:
    type: object
    required:
    - idT
    - fechaInicio
    - fechaFin
    - mentions
    - hashtags
    properties:
      idT:
        type: integer
        format: int32
        example: 2
      fechaInicio:
        type: string
        format: date-time
        example: 2018 30 05 23:55:00 
      fechaFin:
        type: string
        format: date-time
        example: 2018 30 06 00:00:00 
      mentions:
        type: array
        items: 
           type: string
        example: "@fedecalongeOK, @mauriciomacriOK"
      hashtags:
        type: array
        items:
          type: string
        example: "#bocaXFox, #riverXFox"
  
  Reporter:
    type: object
    required:
    - idC
    - fechaInicio
    - fechaFin
    - email
    - mentions
    - hashtags
    - cant_tweets
    - moreTwUser
    - userQuantity
    properties:
      idC:
        type: integer
        format: int32
        example: 2
      fechaInicio:
        type: string
        format: date-time
        example: 2018 30 05 23:55:00 
      fechaFin:
        type: string
        format: date-time
        example: 2018 30 06 00:00:00 
      email:
        type: string
        format: email
        example: "calongefederico@gmail.com"
      mentions:
        type: array
        items: 
           type: string
        example: "@fedecalongeOK, @mauriciomacriOK"
      hashtags:
        type: array
        items:
          type: string
        example: "#bocaXFox, #riverXFox"
      cant_tweets:
        type: integer
        format: int32
        example: 300
      moreTwUser:
        type: string
        example: "juandavid"
      userQuantity:
        type: string
        format: int32
        example: 200
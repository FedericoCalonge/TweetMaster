# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CampaignFetcher(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, start_date: datetime=None, fin_date: datetime=None, email: str=None, mentions: List[str]=None, hashtags: List[str]=None):  # noqa: E501
        """CampaignFetcher - a model defined in Swagger

        :param id: The id of this CampaignFetcher.  # noqa: E501
        :type id: int
        :param start_date: The start_date of this CampaignFetcher.  # noqa: E501
        :type start_date: datetime
        :param fin_date: The fin_date of this CampaignFetcher.  # noqa: E501
        :type fin_date: datetime
        :param email: The email of this CampaignFetcher.  # noqa: E501
        :type email: str
        :param mentions: The mentions of this CampaignFetcher.  # noqa: E501
        :type mentions: List[str]
        :param hashtags: The hashtags of this CampaignFetcher.  # noqa: E501
        :type hashtags: List[str]
        """
        self.swagger_types = {
            'id': int,
            'start_date': datetime,
            'fin_date': datetime,
            'email': str,
            'mentions': List[str],
            'hashtags': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'start_date': 'startDate',
            'fin_date': 'finDate',
            'email': 'email',
            'mentions': 'mentions',
            'hashtags': 'hashtags'
        }

        self._id = id
        self._start_date = start_date
        self._fin_date = fin_date
        self._email = email
        self._mentions = mentions
        self._hashtags = hashtags

    @classmethod
    def from_dict(cls, dikt) -> 'CampaignFetcher':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CampaignFetcher of this CampaignFetcher.  # noqa: E501
        :rtype: CampaignFetcher
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this CampaignFetcher.


        :return: The id of this CampaignFetcher.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this CampaignFetcher.


        :param id: The id of this CampaignFetcher.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this CampaignFetcher.


        :return: The start_date of this CampaignFetcher.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this CampaignFetcher.


        :param start_date: The start_date of this CampaignFetcher.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def fin_date(self) -> datetime:
        """Gets the fin_date of this CampaignFetcher.


        :return: The fin_date of this CampaignFetcher.
        :rtype: datetime
        """
        return self._fin_date

    @fin_date.setter
    def fin_date(self, fin_date: datetime):
        """Sets the fin_date of this CampaignFetcher.


        :param fin_date: The fin_date of this CampaignFetcher.
        :type fin_date: datetime
        """
        if fin_date is None:
            raise ValueError("Invalid value for `fin_date`, must not be `None`")  # noqa: E501

        self._fin_date = fin_date

    @property
    def email(self) -> str:
        """Gets the email of this CampaignFetcher.


        :return: The email of this CampaignFetcher.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this CampaignFetcher.


        :param email: The email of this CampaignFetcher.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def mentions(self) -> List[str]:
        """Gets the mentions of this CampaignFetcher.


        :return: The mentions of this CampaignFetcher.
        :rtype: List[str]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions: List[str]):
        """Sets the mentions of this CampaignFetcher.


        :param mentions: The mentions of this CampaignFetcher.
        :type mentions: List[str]
        """
        if mentions is None:
            raise ValueError("Invalid value for `mentions`, must not be `None`")  # noqa: E501

        self._mentions = mentions

    @property
    def hashtags(self) -> List[str]:
        """Gets the hashtags of this CampaignFetcher.


        :return: The hashtags of this CampaignFetcher.
        :rtype: List[str]
        """
        return self._hashtags

    @hashtags.setter
    def hashtags(self, hashtags: List[str]):
        """Sets the hashtags of this CampaignFetcher.


        :param hashtags: The hashtags of this CampaignFetcher.
        :type hashtags: List[str]
        """
        if hashtags is None:
            raise ValueError("Invalid value for `hashtags`, must not be `None`")  # noqa: E501

        self._hashtags = hashtags

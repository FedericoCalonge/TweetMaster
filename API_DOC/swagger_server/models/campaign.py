# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Campaign(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id_c: int=None, fecha_inicio: datetime=None, fecha_fin: datetime=None, email: str=None, mentions: List[str]=None, hashtags: List[str]=None):  # noqa: E501
        """Campaign - a model defined in Swagger

        :param id_c: The id_c of this Campaign.  # noqa: E501
        :type id_c: int
        :param fecha_inicio: The fecha_inicio of this Campaign.  # noqa: E501
        :type fecha_inicio: datetime
        :param fecha_fin: The fecha_fin of this Campaign.  # noqa: E501
        :type fecha_fin: datetime
        :param email: The email of this Campaign.  # noqa: E501
        :type email: str
        :param mentions: The mentions of this Campaign.  # noqa: E501
        :type mentions: List[str]
        :param hashtags: The hashtags of this Campaign.  # noqa: E501
        :type hashtags: List[str]
        """
        self.swagger_types = {
            'id_c': int,
            'fecha_inicio': datetime,
            'fecha_fin': datetime,
            'email': str,
            'mentions': List[str],
            'hashtags': List[str]
        }

        self.attribute_map = {
            'id_c': 'idC',
            'fecha_inicio': 'fechaInicio',
            'fecha_fin': 'fechaFin',
            'email': 'email',
            'mentions': 'mentions',
            'hashtags': 'hashtags'
        }

        self._id_c = id_c
        self._fecha_inicio = fecha_inicio
        self._fecha_fin = fecha_fin
        self._email = email
        self._mentions = mentions
        self._hashtags = hashtags

    @classmethod
    def from_dict(cls, dikt) -> 'Campaign':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Campaign of this Campaign.  # noqa: E501
        :rtype: Campaign
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_c(self) -> int:
        """Gets the id_c of this Campaign.


        :return: The id_c of this Campaign.
        :rtype: int
        """
        return self._id_c

    @id_c.setter
    def id_c(self, id_c: int):
        """Sets the id_c of this Campaign.


        :param id_c: The id_c of this Campaign.
        :type id_c: int
        """
        if id_c is None:
            raise ValueError("Invalid value for `id_c`, must not be `None`")  # noqa: E501

        self._id_c = id_c

    @property
    def fecha_inicio(self) -> datetime:
        """Gets the fecha_inicio of this Campaign.


        :return: The fecha_inicio of this Campaign.
        :rtype: datetime
        """
        return self._fecha_inicio

    @fecha_inicio.setter
    def fecha_inicio(self, fecha_inicio: datetime):
        """Sets the fecha_inicio of this Campaign.


        :param fecha_inicio: The fecha_inicio of this Campaign.
        :type fecha_inicio: datetime
        """
        if fecha_inicio is None:
            raise ValueError("Invalid value for `fecha_inicio`, must not be `None`")  # noqa: E501

        self._fecha_inicio = fecha_inicio

    @property
    def fecha_fin(self) -> datetime:
        """Gets the fecha_fin of this Campaign.


        :return: The fecha_fin of this Campaign.
        :rtype: datetime
        """
        return self._fecha_fin

    @fecha_fin.setter
    def fecha_fin(self, fecha_fin: datetime):
        """Sets the fecha_fin of this Campaign.


        :param fecha_fin: The fecha_fin of this Campaign.
        :type fecha_fin: datetime
        """
        if fecha_fin is None:
            raise ValueError("Invalid value for `fecha_fin`, must not be `None`")  # noqa: E501

        self._fecha_fin = fecha_fin

    @property
    def email(self) -> str:
        """Gets the email of this Campaign.


        :return: The email of this Campaign.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Campaign.


        :param email: The email of this Campaign.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def mentions(self) -> List[str]:
        """Gets the mentions of this Campaign.


        :return: The mentions of this Campaign.
        :rtype: List[str]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions: List[str]):
        """Sets the mentions of this Campaign.


        :param mentions: The mentions of this Campaign.
        :type mentions: List[str]
        """
        if mentions is None:
            raise ValueError("Invalid value for `mentions`, must not be `None`")  # noqa: E501

        self._mentions = mentions

    @property
    def hashtags(self) -> List[str]:
        """Gets the hashtags of this Campaign.


        :return: The hashtags of this Campaign.
        :rtype: List[str]
        """
        return self._hashtags

    @hashtags.setter
    def hashtags(self, hashtags: List[str]):
        """Sets the hashtags of this Campaign.


        :param hashtags: The hashtags of this Campaign.
        :type hashtags: List[str]
        """
        if hashtags is None:
            raise ValueError("Invalid value for `hashtags`, must not be `None`")  # noqa: E501

        self._hashtags = hashtags
